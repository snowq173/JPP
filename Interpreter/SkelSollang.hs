-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelSollang where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsSollang

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsSollang.Ident -> Result
transIdent x = case x of
  AbsSollang.Ident string -> failure x

transProgram :: Show a => AbsSollang.Program' a -> Result
transProgram x = case x of
  AbsSollang.Program _ globalvarsdecl fndefs -> failure x

transGlobalVarsDecl :: Show a => AbsSollang.GlobalVarsDecl' a -> Result
transGlobalVarsDecl x = case x of
  AbsSollang.GlobalVarsDecl _ decls -> failure x

transGlobalVarDecl :: Show a => AbsSollang.GlobalVarDecl' a -> Result
transGlobalVarDecl x = case x of
  AbsSollang.GlobalVarDecl _ type_ ident -> failure x

transFnDef :: Show a => AbsSollang.FnDef' a -> Result
transFnDef x = case x of
  AbsSollang.FunctionDef _ type_ ident args fbody -> failure x

transArg :: Show a => AbsSollang.Arg' a -> Result
transArg x = case x of
  AbsSollang.FunctionArg _ argpass ident -> failure x

transArgPass :: Show a => AbsSollang.ArgPass' a -> Result
transArgPass x = case x of
  AbsSollang.ValueArg _ type_ -> failure x
  AbsSollang.VariableArg _ type_ -> failure x

transFReturn :: Show a => AbsSollang.FReturn' a -> Result
transFReturn x = case x of
  AbsSollang.VoidReturn _ -> failure x
  AbsSollang.Return _ expr -> failure x

transFBody :: Show a => AbsSollang.FBody' a -> Result
transFBody x = case x of
  AbsSollang.FunctionBody _ decls fndefs stmts freturn -> failure x

transBlock :: Show a => AbsSollang.Block' a -> Result
transBlock x = case x of
  AbsSollang.Block _ decls stmts -> failure x

transDecl :: Show a => AbsSollang.Decl' a -> Result
transDecl x = case x of
  AbsSollang.Decl _ type_ ident -> failure x
  AbsSollang.DeclInit _ type_ ident expr -> failure x

transLocalFnDef :: Show a => AbsSollang.LocalFnDef' a -> Result
transLocalFnDef x = case x of
  AbsSollang.LocalFunctionDef _ type_ ident args fbody -> failure x

transStmt :: Show a => AbsSollang.Stmt' a -> Result
transStmt x = case x of
  AbsSollang.Ass _ ident expr -> failure x
  AbsSollang.Cont _ -> failure x
  AbsSollang.Break _ -> failure x
  AbsSollang.Print _ expr -> failure x
  AbsSollang.Incr _ ident -> failure x
  AbsSollang.Decr _ ident -> failure x
  AbsSollang.Cond _ expr block -> failure x
  AbsSollang.CondElse _ expr block1 block2 -> failure x
  AbsSollang.While _ expr block -> failure x
  AbsSollang.SExp _ expr -> failure x

transType :: Show a => AbsSollang.Type' a -> Result
transType x = case x of
  AbsSollang.Int _ -> failure x
  AbsSollang.Str _ -> failure x
  AbsSollang.Bool _ -> failure x
  AbsSollang.Void _ -> failure x

transExpr :: Show a => AbsSollang.Expr' a -> Result
transExpr x = case x of
  AbsSollang.EVar _ ident -> failure x
  AbsSollang.ELitInt _ integer -> failure x
  AbsSollang.ELitTrue _ -> failure x
  AbsSollang.ELitFalse _ -> failure x
  AbsSollang.EApp _ ident exprs -> failure x
  AbsSollang.EString _ string -> failure x
  AbsSollang.Neg _ expr -> failure x
  AbsSollang.Not _ expr -> failure x
  AbsSollang.EMul _ expr1 mulop expr2 -> failure x
  AbsSollang.EAdd _ expr1 addop expr2 -> failure x
  AbsSollang.ERel _ expr1 relop expr2 -> failure x
  AbsSollang.EAnd _ expr1 expr2 -> failure x
  AbsSollang.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsSollang.AddOp' a -> Result
transAddOp x = case x of
  AbsSollang.Plus _ -> failure x
  AbsSollang.Minus _ -> failure x

transMulOp :: Show a => AbsSollang.MulOp' a -> Result
transMulOp x = case x of
  AbsSollang.Times _ -> failure x
  AbsSollang.Div _ -> failure x
  AbsSollang.Mod _ -> failure x

transRelOp :: Show a => AbsSollang.RelOp' a -> Result
transRelOp x = case x of
  AbsSollang.LTH _ -> failure x
  AbsSollang.LE _ -> failure x
  AbsSollang.GTH _ -> failure x
  AbsSollang.GE _ -> failure x
  AbsSollang.EQU _ -> failure x
  AbsSollang.NE _ -> failure x
