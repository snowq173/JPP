-- programs ------------------------------------------------

entrypoints Program ;

Program.           Program ::= GlobalVarsDecl [FnDef] ;

-- Global variables declaration 

GlobalVarsDecl.    GlobalVarsDecl ::= "vars" "{" [Decl] "}" ;

GlobalVarDecl.     GlobalVarDecl ::= Type Ident ;

separator          GlobalVarDecl ";" ;

-- Function declaration

FunctionDef.       FnDef ::= "function" Type Ident "(" [Arg] ")" FBody ;

separator FnDef "" ;

FunctionArg.       Arg ::= ArgPass Ident;

-- Argument passing types - by value and by variable

ValueArg.          ArgPass ::= Type ;

VariableArg.       ArgPass ::= Type "&" ;

separator          Arg "," ;

-- Function return -----------------------------------------

VoidReturn.        FReturn ::= "return" ";" ;

Return.            FReturn ::= "return" Expr ";" ;

-- Block ---------------------------------------------------

FunctionBody.      FBody ::= "{" [Decl] [FnDef] [Stmt] FReturn "}" ;

Block.             Block ::= "{" [Decl] [Stmt] "}" ;

-- Variable declarations -----------------------------------

Decl.              Decl ::= Type Ident ";" ;

DeclInit.          Decl ::= Type Ident "=" Expr ";" ;

-- Local declarations --------------------------------------

separator          Decl "" ;

LocalFunctionDef.  LocalFnDef ::=  "function" Type Ident "(" [Arg] ")" FBody ;

separator          LocalFnDef "" ;

-- statements ----------------------------------------------

separator          Stmt "" ;

Ass.               Stmt ::= Ident "=" Expr  ";" ;

Cont.              Stmt ::= "continue" ";" ;

Break.             Stmt ::= "break" ";" ;

Print.             Stmt ::= "print" Expr ";" ;

Incr.              Stmt ::= Ident "++"  ";" ;

Decr.              Stmt ::= Ident "--"  ";" ;

Cond.              Stmt ::= "if" "(" Expr ")" Block ;

CondElse.          Stmt ::= "if" "(" Expr ")" Block "else" Block ;

While.             Stmt ::= "while" "(" Expr ")" Block ;

SExp.              Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.               Type ::= "int" ;

Str.               Type ::= "string" ;

Bool.              Type ::= "boolean" ;

Void.              Type ::= "void" ;

separator          Type "," ;

-- Expressions ---------------------------------------------

EVar.              Expr6 ::= Ident ;

ELitInt.           Expr6 ::= Integer ;

ELitTrue.          Expr6 ::= "true" ;

ELitFalse.         Expr6 ::= "false" ;

EApp.              Expr6 ::= Ident "(" [Expr] ")" ;

EString.           Expr6 ::= String ;

Neg.               Expr5 ::= "-" Expr6 ;

Not.               Expr5 ::= "!" Expr6 ;

EMul.              Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.              Expr3 ::= Expr3 AddOp Expr4 ;

ERel.              Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.              Expr1 ::= Expr2 "&&" Expr1 ;

EOr.               Expr ::= Expr1 "||" Expr ;

coercions          Expr 6 ;

separator          Expr "," ;

-- operators -----------------------------------------------

Plus.              AddOp ::= "+" ;

Minus.             AddOp ::= "-" ;

Times.             MulOp ::= "*" ;

Div.               MulOp ::= "/" ;

Mod.               MulOp ::= "%" ;

LTH.               RelOp ::= "<" ;

LE.                RelOp ::= "<=" ;

GTH.               RelOp ::= ">" ;

GE.                RelOp ::= ">=" ;

EQU.               RelOp ::= "==" ;

NE.                RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment            "//" ;

comment            "/*" "*/" ;
