-- File generated by the BNF Converter (bnfc 2.9.3).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language Sollang.

module AbsSollang where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Program a (GlobalVarsDecl' a) [FnDef' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type GlobalVarsDecl = GlobalVarsDecl' BNFC'Position
data GlobalVarsDecl' a = GlobalVarsDecl a [Decl' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type GlobalVarDecl = GlobalVarDecl' BNFC'Position
data GlobalVarDecl' a = GlobalVarDecl a (Type' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type FnDef = FnDef' BNFC'Position
data FnDef' a = FunctionDef a (Type' a) Ident [Arg' a] (FBody' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Arg = Arg' BNFC'Position
data Arg' a = FunctionArg a (ArgPass' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ArgPass = ArgPass' BNFC'Position
data ArgPass' a = ValueArg a (Type' a) | VariableArg a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type FReturn = FReturn' BNFC'Position
data FReturn' a = VoidReturn a | Return a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type FBody = FBody' BNFC'Position
data FBody' a
    = FunctionBody a [Decl' a] [FnDef' a] [Stmt' a] (FReturn' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Block = Block' BNFC'Position
data Block' a = Block a [Decl' a] [Stmt' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Decl = Decl' BNFC'Position
data Decl' a
    = Decl a (Type' a) Ident | DeclInit a (Type' a) Ident (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type LocalFnDef = LocalFnDef' BNFC'Position
data LocalFnDef' a
    = LocalFunctionDef a (Type' a) Ident [Arg' a] (FBody' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Stmt = Stmt' BNFC'Position
data Stmt' a
    = Ass a Ident (Expr' a)
    | Cont a
    | Break a
    | Print a (Expr' a)
    | Incr a Ident
    | Decr a Ident
    | Cond a (Expr' a) (Block' a)
    | CondElse a (Expr' a) (Block' a) (Block' a)
    | While a (Expr' a) (Block' a)
    | SExp a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a = Int a | Str a | Bool a | Void a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = EVar a Ident
    | ELitInt a Integer
    | ELitTrue a
    | ELitFalse a
    | EApp a Ident [Expr' a]
    | EString a String
    | Neg a (Expr' a)
    | Not a (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Program p _ _ -> p

instance HasPosition GlobalVarsDecl where
  hasPosition = \case
    GlobalVarsDecl p _ -> p

instance HasPosition GlobalVarDecl where
  hasPosition = \case
    GlobalVarDecl p _ _ -> p

instance HasPosition FnDef where
  hasPosition = \case
    FunctionDef p _ _ _ _ -> p

instance HasPosition Arg where
  hasPosition = \case
    FunctionArg p _ _ -> p

instance HasPosition ArgPass where
  hasPosition = \case
    ValueArg p _ -> p
    VariableArg p _ -> p

instance HasPosition FReturn where
  hasPosition = \case
    VoidReturn p -> p
    Return p _ -> p

instance HasPosition FBody where
  hasPosition = \case
    FunctionBody p _ _ _ _ -> p

instance HasPosition Block where
  hasPosition = \case
    Block p _ _ -> p

instance HasPosition Decl where
  hasPosition = \case
    Decl p _ _ -> p
    DeclInit p _ _ _ -> p

instance HasPosition LocalFnDef where
  hasPosition = \case
    LocalFunctionDef p _ _ _ _ -> p

instance HasPosition Stmt where
  hasPosition = \case
    Ass p _ _ -> p
    Cont p -> p
    Break p -> p
    Print p _ -> p
    Incr p _ -> p
    Decr p _ -> p
    Cond p _ _ -> p
    CondElse p _ _ _ -> p
    While p _ _ -> p
    SExp p _ -> p

instance HasPosition Type where
  hasPosition = \case
    Int p -> p
    Str p -> p
    Bool p -> p
    Void p -> p

instance HasPosition Expr where
  hasPosition = \case
    EVar p _ -> p
    ELitInt p _ -> p
    ELitTrue p -> p
    ELitFalse p -> p
    EApp p _ _ -> p
    EString p _ -> p
    Neg p _ -> p
    Not p _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

