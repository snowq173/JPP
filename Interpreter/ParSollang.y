-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParSollang
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsSollang
import LexSollang

}

%name pProgram_internal Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'        { PT _ (TS _ 1)  }
  '!='       { PT _ (TS _ 2)  }
  '%'        { PT _ (TS _ 3)  }
  '&'        { PT _ (TS _ 4)  }
  '&&'       { PT _ (TS _ 5)  }
  '('        { PT _ (TS _ 6)  }
  ')'        { PT _ (TS _ 7)  }
  '*'        { PT _ (TS _ 8)  }
  '+'        { PT _ (TS _ 9)  }
  '++'       { PT _ (TS _ 10) }
  ','        { PT _ (TS _ 11) }
  '-'        { PT _ (TS _ 12) }
  '--'       { PT _ (TS _ 13) }
  '/'        { PT _ (TS _ 14) }
  ';'        { PT _ (TS _ 15) }
  '<'        { PT _ (TS _ 16) }
  '<='       { PT _ (TS _ 17) }
  '='        { PT _ (TS _ 18) }
  '=='       { PT _ (TS _ 19) }
  '>'        { PT _ (TS _ 20) }
  '>='       { PT _ (TS _ 21) }
  'boolean'  { PT _ (TS _ 22) }
  'break'    { PT _ (TS _ 23) }
  'continue' { PT _ (TS _ 24) }
  'else'     { PT _ (TS _ 25) }
  'false'    { PT _ (TS _ 26) }
  'function' { PT _ (TS _ 27) }
  'if'       { PT _ (TS _ 28) }
  'int'      { PT _ (TS _ 29) }
  'print'    { PT _ (TS _ 30) }
  'return'   { PT _ (TS _ 31) }
  'string'   { PT _ (TS _ 32) }
  'true'     { PT _ (TS _ 33) }
  'vars'     { PT _ (TS _ 34) }
  'void'     { PT _ (TS _ 35) }
  'while'    { PT _ (TS _ 36) }
  '{'        { PT _ (TS _ 37) }
  '||'       { PT _ (TS _ 38) }
  '}'        { PT _ (TS _ 39) }
  L_Ident    { PT _ (TV _)    }
  L_integ    { PT _ (TI _)    }
  L_quoted   { PT _ (TL _)    }

%%

Ident :: { (AbsSollang.BNFC'Position, AbsSollang.Ident) }
Ident  : L_Ident { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Ident (tokenText $1)) }

Integer :: { (AbsSollang.BNFC'Position, Integer) }
Integer  : L_integ  { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), (read (tokenText $1)) :: Integer) }

String  :: { (AbsSollang.BNFC'Position, String) }
String   : L_quoted { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), ((\(PT _ (TL s)) -> s) $1)) }

Program :: { (AbsSollang.BNFC'Position, AbsSollang.Program) }
Program
  : GlobalVarsDecl ListFnDef { (fst $1, AbsSollang.Program (fst $1) (snd $1) (snd $2)) }

GlobalVarsDecl :: { (AbsSollang.BNFC'Position, AbsSollang.GlobalVarsDecl) }
GlobalVarsDecl
  : 'vars' '{' ListDecl '}' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.GlobalVarsDecl (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $3)) }

GlobalVarDecl :: { (AbsSollang.BNFC'Position, AbsSollang.GlobalVarDecl) }
GlobalVarDecl
  : Type Ident { (fst $1, AbsSollang.GlobalVarDecl (fst $1) (snd $1) (snd $2)) }

ListGlobalVarDecl :: { (AbsSollang.BNFC'Position, [AbsSollang.GlobalVarDecl]) }
ListGlobalVarDecl
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | GlobalVarDecl { (fst $1, (:[]) (snd $1)) }
  | GlobalVarDecl ';' ListGlobalVarDecl { (fst $1, (:) (snd $1) (snd $3)) }

FnDef :: { (AbsSollang.BNFC'Position, AbsSollang.FnDef) }
FnDef
  : 'function' Type Ident '(' ListArg ')' FBody { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.FunctionDef (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5) (snd $7)) }

ListFnDef :: { (AbsSollang.BNFC'Position, [AbsSollang.FnDef]) }
ListFnDef
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | FnDef ListFnDef { (fst $1, (:) (snd $1) (snd $2)) }

Arg :: { (AbsSollang.BNFC'Position, AbsSollang.Arg) }
Arg
  : ArgPass Ident { (fst $1, AbsSollang.FunctionArg (fst $1) (snd $1) (snd $2)) }

ArgPass :: { (AbsSollang.BNFC'Position, AbsSollang.ArgPass) }
ArgPass
  : Type { (fst $1, AbsSollang.ValueArg (fst $1) (snd $1)) }
  | Type '&' { (fst $1, AbsSollang.VariableArg (fst $1) (snd $1)) }

ListArg :: { (AbsSollang.BNFC'Position, [AbsSollang.Arg]) }
ListArg
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | Arg { (fst $1, (:[]) (snd $1)) }
  | Arg ',' ListArg { (fst $1, (:) (snd $1) (snd $3)) }

FReturn :: { (AbsSollang.BNFC'Position, AbsSollang.FReturn) }
FReturn
  : 'return' ';' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.VoidReturn (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'return' Expr ';' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Return (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2)) }

FBody :: { (AbsSollang.BNFC'Position, AbsSollang.FBody) }
FBody
  : '{' ListDecl ListFnDef ListStmt FReturn '}' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.FunctionBody (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $4) (snd $5)) }

Block :: { (AbsSollang.BNFC'Position, AbsSollang.Block) }
Block
  : '{' ListDecl ListStmt '}' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Block (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3)) }

Decl :: { (AbsSollang.BNFC'Position, AbsSollang.Decl) }
Decl
  : Type Ident ';' { (fst $1, AbsSollang.Decl (fst $1) (snd $1) (snd $2)) }
  | Type Ident '=' Expr ';' { (fst $1, AbsSollang.DeclInit (fst $1) (snd $1) (snd $2) (snd $4)) }

ListDecl :: { (AbsSollang.BNFC'Position, [AbsSollang.Decl]) }
ListDecl
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | Decl ListDecl { (fst $1, (:) (snd $1) (snd $2)) }

LocalFnDef :: { (AbsSollang.BNFC'Position, AbsSollang.LocalFnDef) }
LocalFnDef
  : 'function' Type Ident '(' ListArg ')' FBody { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.LocalFunctionDef (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2) (snd $3) (snd $5) (snd $7)) }

ListLocalFnDef :: { (AbsSollang.BNFC'Position, [AbsSollang.LocalFnDef]) }
ListLocalFnDef
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | LocalFnDef ListLocalFnDef { (fst $1, (:) (snd $1) (snd $2)) }

ListStmt :: { (AbsSollang.BNFC'Position, [AbsSollang.Stmt]) }
ListStmt
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | Stmt ListStmt { (fst $1, (:) (snd $1) (snd $2)) }

Stmt :: { (AbsSollang.BNFC'Position, AbsSollang.Stmt) }
Stmt
  : Ident '=' Expr ';' { (fst $1, AbsSollang.Ass (fst $1) (snd $1) (snd $3)) }
  | 'continue' ';' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Cont (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'break' ';' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Break (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'print' Expr ';' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Print (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Ident '++' ';' { (fst $1, AbsSollang.Incr (fst $1) (snd $1)) }
  | Ident '--' ';' { (fst $1, AbsSollang.Decr (fst $1) (snd $1)) }
  | 'if' '(' Expr ')' Block { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Cond (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | 'if' '(' Expr ')' Block 'else' Block { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.CondElse (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5) (snd $7)) }
  | 'while' '(' Expr ')' Block { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.While (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $3) (snd $5)) }
  | Expr ';' { (fst $1, AbsSollang.SExp (fst $1) (snd $1)) }

Type :: { (AbsSollang.BNFC'Position, AbsSollang.Type) }
Type
  : 'int' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Int (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'string' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Str (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'boolean' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Bool (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'void' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Void (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }

ListType :: { (AbsSollang.BNFC'Position, [AbsSollang.Type]) }
ListType
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | Type { (fst $1, (:[]) (snd $1)) }
  | Type ',' ListType { (fst $1, (:) (snd $1) (snd $3)) }

Expr6 :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr6
  : Ident { (fst $1, AbsSollang.EVar (fst $1) (snd $1)) }
  | Integer { (fst $1, AbsSollang.ELitInt (fst $1) (snd $1)) }
  | 'true' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.ELitTrue (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | 'false' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.ELitFalse (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | Ident '(' ListExpr ')' { (fst $1, AbsSollang.EApp (fst $1) (snd $1) (snd $3)) }
  | String { (fst $1, AbsSollang.EString (fst $1) (snd $1)) }
  | '(' Expr ')' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), (snd $2)) }

Expr5 :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr5
  : '-' Expr6 { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Neg (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | '!' Expr6 { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Not (uncurry AbsSollang.BNFC'Position (tokenLineCol $1)) (snd $2)) }
  | Expr6 { (fst $1, (snd $1)) }

Expr4 :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr4
  : Expr4 MulOp Expr5 { (fst $1, AbsSollang.EMul (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr5 { (fst $1, (snd $1)) }

Expr3 :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr3
  : Expr3 AddOp Expr4 { (fst $1, AbsSollang.EAdd (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr4 { (fst $1, (snd $1)) }

Expr2 :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr2
  : Expr2 RelOp Expr3 { (fst $1, AbsSollang.ERel (fst $1) (snd $1) (snd $2) (snd $3)) }
  | Expr3 { (fst $1, (snd $1)) }

Expr1 :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr1
  : Expr2 '&&' Expr1 { (fst $1, AbsSollang.EAnd (fst $1) (snd $1) (snd $3)) }
  | Expr2 { (fst $1, (snd $1)) }

Expr :: { (AbsSollang.BNFC'Position, AbsSollang.Expr) }
Expr
  : Expr1 '||' Expr { (fst $1, AbsSollang.EOr (fst $1) (snd $1) (snd $3)) }
  | Expr1 { (fst $1, (snd $1)) }

ListExpr :: { (AbsSollang.BNFC'Position, [AbsSollang.Expr]) }
ListExpr
  : {- empty -} { (AbsSollang.BNFC'NoPosition, []) }
  | Expr { (fst $1, (:[]) (snd $1)) }
  | Expr ',' ListExpr { (fst $1, (:) (snd $1) (snd $3)) }

AddOp :: { (AbsSollang.BNFC'Position, AbsSollang.AddOp) }
AddOp
  : '+' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Plus (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '-' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Minus (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }

MulOp :: { (AbsSollang.BNFC'Position, AbsSollang.MulOp) }
MulOp
  : '*' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Times (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '/' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Div (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '%' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.Mod (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }

RelOp :: { (AbsSollang.BNFC'Position, AbsSollang.RelOp) }
RelOp
  : '<' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.LTH (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '<=' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.LE (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '>' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.GTH (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '>=' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.GE (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '==' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.EQU (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }
  | '!=' { (uncurry AbsSollang.BNFC'Position (tokenLineCol $1), AbsSollang.NE (uncurry AbsSollang.BNFC'Position (tokenLineCol $1))) }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

-- Entrypoints

pProgram :: [Token] -> Err AbsSollang.Program
pProgram = fmap snd . pProgram_internal
}

